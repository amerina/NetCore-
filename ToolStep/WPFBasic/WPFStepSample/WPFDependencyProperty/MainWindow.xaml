<Window x:Class="WPFStepSample.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPFStepSample"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="800">
    <Window.Resources>
        <Style x:Key="TextBlockBottomStyle" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="TextBlock">
            <Style.Setters>
                <Setter Property="FontSize" Value="30"></Setter>
                <Setter Property="FontStyle" Value="Italic"></Setter>
                <Setter Property="Width" Value="100"></Setter>
            </Style.Setters>
        </Style>
        <Thickness x:Key="MarginTOP">0 5 0 0</Thickness>
    </Window.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"></RowDefinition>
            <RowDefinition Height="50"></RowDefinition>
            <RowDefinition Height="50"></RowDefinition>
            <RowDefinition Height="*"></RowDefinition>
        </Grid.RowDefinitions>
        <!--dependency property-->
        <Button x:Name="btnTest" Click="btnTest_Click" Grid.Row="1" Height="40" Width="175" Margin="10" Content="Dependency Property">
            <Button.Style>
                <!--The x:Type markup extension in XAML has a similar functionality like typeof() in C#-->
                <Style TargetType="{x:Type Button}">
                    <Style.Triggers>
                        <!--When the mouse is over the button, it will change the foreground color of a button. 
                        When the mouse leaves the button, it changes back to its original color.-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="Red"></Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
        </Button>

        <!--dependency property user control Sample-->
        <local:CustomerControl x:Name="txtText" SetText="Hello World"></local:CustomerControl>

        <!--MVVM Sample-->
        <!--WPF在内部使用依赖属性，依赖属性的名称总是以关键字property结尾。这是一个标准的约定-->
        <StackPanel Grid.Row="2" Orientation="Horizontal">
            <Label x:Name="lblUserName" Content="UserName:" VerticalAlignment="Center" Margin="200 0 0 0"></Label>
            <TextBox  x:Name="txtUserName" Text="{Binding UserName}" Height="30" Width="300"></TextBox>

            <Button x:Name="btnSubmit" Margin="{StaticResource MarginTOP}" Content="Submit" Height="20" Width="100" HorizontalAlignment="Center" VerticalAlignment="Center"></Button>
            <TextBlock x:Name="TextBlockUserName" Text="{Binding UserName}" Style="{DynamicResource TextBlockBottomStyle}" HorizontalAlignment="Center" VerticalAlignment="Center"></TextBlock>
        </StackPanel>

        <!--https://www.codeproject.com/Articles/140620/WPF-Tutorial-Dependency-Property-->
        <Grid Grid.Row="3">
            <Grid.RowDefinitions>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
                <RowDefinition/>
            </Grid.RowDefinitions>
            <local:CustomerControl1 x:Name="ucust" Grid.Row="0" local:MainWindow.IsValuePassed="true"/>
            <!--绑定元素值Binding ElementName=ucust-->
            <TextBox x:Name="tbChange" Text="{Binding ElementName=ucust, Path=DP}" Grid.Row="1"/>
            <TextBox Grid.Row="2"/>
            <Button Click="Button_Click" Grid.Row="3" Content="Pass Value"/>
        </Grid>
    </Grid>
</Window>
